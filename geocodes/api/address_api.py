"""
    geo.codes

    The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.  # noqa: E501

    The version of the OpenAPI document: 1.0.0-alpha
    Contact: help@geo.codes
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from geocodes.api_client import ApiClient, Endpoint as _Endpoint
from geocodes.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from geocodes.model.geocoding import Geocoding


class AddressApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __v1_address_geocode(
            self,
            q,
            **kwargs
        ):
            """Geocode an unstructured address string  # noqa: E501

            **Description**<br><br>  Geocode a single address. This parses the input address and matches it against our records to produce the geocoded result.  This does a best-attempt to geocode the given address in the face of human errors in the input data. This can be the wrong city (\"New York City\" instead of \"New York\") a missing postal code, a misspelled street name, house numbers that don't exist, etc.  As more corrections are needed, the certainty in the result drops. This can be tuned with a minimum certainty parameter. If our confidence in the result is less than the minimum certainty, it will not be returned. The default is 30. 30 was chosen to be robust against unclean data without returning results that are unlikely to be true. We don't recommend setting this parameter above 90 because exact matching is too restrictive for the mistakes that people typically make when writing addresses -- even people writing their own addresses will make mistakes that are never corrected.  **Lookup cost**  This query requires an account. Please sign up at https://geo.codes/signup and get your API key at https://geo.codes/account/api  One query counts as one lookup. It only costs a query if it returns data. If you have exceeded your account quota, the request will not succeed.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_address_geocode(q, async_req=True)
            >>> result = thread.get()

            Args:
                q (str): The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail.

            Keyword Args:
                min_confidence (int): The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don't recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Geocoding
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['q'] = \
                q
            return self.call_with_http_info(**kwargs)

        self.v1_address_geocode = _Endpoint(
            settings={
                'response_type': (Geocoding,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyURLAuth'
                ],
                'endpoint_path': '/v1/address/geocode',
                'operation_id': 'v1_address_geocode',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                    'min_confidence',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'min_confidence':
                        (int,),
                },
                'attribute_map': {
                    'q': 'q',
                    'min_confidence': 'min_confidence',
                },
                'location_map': {
                    'q': 'query',
                    'min_confidence': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_address_geocode
        )

        def __v1_address_structured_geocode(
            self,
            street_address,
            **kwargs
        ):
            """Geocode structured addresses  # noqa: E501

            **Description**<br>  Geocode a single structured address. This takes address components (street, city, state, etc) and matches it against our records to produce the geocoded result.  This does a best-attempt to geocode the given address in the face of human errors in the input data. This can be the wrong city (\"New York City\" instead of \"New York\") a missing postal code, a misspelled street name, house numbers that don't exist, etc.  As more corrections are needed, the certainty in the result drops. This can be tuned with a minimum certainty parameter. If our confidence in the result is less than the minimum certainty, it will not be returned. The default is 30%. 30% was chosen to be robust against unclean data without returning results that are unlikely to be true. We don't recommend setting this parameter above 90% because exact matching is too restrictive for the mistakes that people typically make when writing addresses -- even people writing their own addresses will make mistakes that are never corrected because they Just Work.  **Lookup cost**<br>  This query requires an account. Please sign up at https://geo.codes/signup and get your API key at https://geo.codes/account/api  One query counts as one lookup. It only costs a query if it returns data. If you have exceeded your account quota, the request will not succeed.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_address_structured_geocode(street_address, async_req=True)
            >>> result = thread.get()

            Args:
                street_address (str): The street address line, including the number and street type.

            Keyword Args:
                city (str): The city. Not required, but it's highly recommended that you add either the city or postal_code fields.. [optional]
                state (str): The state with the address. Not required, but it's highly recommended that you add the postal_code if the state is not present.. [optional]
                postal_code (str): The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results.. [optional]
                min_confidence (int): The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don't recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Geocoding
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['street_address'] = \
                street_address
            return self.call_with_http_info(**kwargs)

        self.v1_address_structured_geocode = _Endpoint(
            settings={
                'response_type': (Geocoding,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyURLAuth'
                ],
                'endpoint_path': '/v1/address/structured_geocode',
                'operation_id': 'v1_address_structured_geocode',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'street_address',
                    'city',
                    'state',
                    'postal_code',
                    'min_confidence',
                ],
                'required': [
                    'street_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'street_address':
                        (str,),
                    'city':
                        (str,),
                    'state':
                        (str,),
                    'postal_code':
                        (str,),
                    'min_confidence':
                        (int,),
                },
                'attribute_map': {
                    'street_address': 'street_address',
                    'city': 'city',
                    'state': 'state',
                    'postal_code': 'postal_code',
                    'min_confidence': 'min_confidence',
                },
                'location_map': {
                    'street_address': 'query',
                    'city': 'query',
                    'state': 'query',
                    'postal_code': 'query',
                    'min_confidence': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_address_structured_geocode
        )
